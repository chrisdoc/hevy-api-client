// This file is auto-generated by @hey-api/openapi-ts

export type PostWorkoutsRequestSet = {
    /**
     * The type of the set.
     */
    type?: 'warmup' | 'normal' | 'failure' | 'dropset';
    /**
     * The weight in kilograms.
     */
    weight_kg?: number | null;
    /**
     * The number of repetitions.
     */
    reps?: number | null;
    /**
     * The distance in meters.
     */
    distance_meters?: number | null;
    /**
     * The duration in seconds.
     */
    duration_seconds?: number | null;
    /**
     * A custom metric for the set. Currently used for steps and floors.
     */
    custom_metric?: number | null;
    /**
     * The Rating of Perceived Exertion (RPE).
     */
    rpe?: 6 | 7 | 7.5 | 8 | 8.5 | 9 | 9.5 | 10;
};

export type PostWorkoutsRequestExercise = {
    /**
     * The ID of the exercise template.
     */
    exercise_template_id?: string;
    /**
     * The ID of the superset.
     */
    superset_id?: number | null;
    /**
     * Additional notes for the exercise.
     */
    notes?: string | null;
    sets?: Array<PostWorkoutsRequestSet>;
};

export type PostWorkoutsRequestBody = {
    workout?: {
        /**
         * The title of the workout.
         */
        title?: string;
        /**
         * A description for the workout workout.
         */
        description?: string | null;
        /**
         * The time the workout started.
         */
        start_time?: string;
        /**
         * The time the workout ended.
         */
        end_time?: string;
        /**
         * A boolean indicating if the workout is private.
         */
        is_private?: boolean;
        exercises?: Array<PostWorkoutsRequestExercise>;
    };
};

export type PostRoutinesRequestSet = {
    /**
     * The type of the set.
     */
    type?: 'warmup' | 'normal' | 'failure' | 'dropset';
    /**
     * The weight in kilograms.
     */
    weight_kg?: number | null;
    /**
     * The number of repetitions.
     */
    reps?: number | null;
    /**
     * The distance in meters.
     */
    distance_meters?: number | null;
    /**
     * The duration in seconds.
     */
    duration_seconds?: number | null;
    /**
     * A custom metric for the set. Currently used for steps and floors.
     */
    custom_metric?: number | null;
    /**
     * Range of reps for the set, if applicable
     */
    rep_range?: {
        /**
         * Starting rep count for the range
         */
        start?: number | null;
        /**
         * Ending rep count for the range
         */
        end?: number | null;
    } | null;
};

export type PostRoutinesRequestExercise = {
    /**
     * The ID of the exercise template.
     */
    exercise_template_id?: string;
    /**
     * The ID of the superset.
     */
    superset_id?: number | null;
    /**
     * The rest time in seconds.
     */
    rest_seconds?: number | null;
    /**
     * Additional notes for the exercise.
     */
    notes?: string | null;
    sets?: Array<PostRoutinesRequestSet>;
};

export type PostRoutinesRequestBody = {
    routine?: {
        /**
         * The title of the routine.
         */
        title?: string;
        /**
         * The folder id the routine should be added to. Pass null to insert the routine into default "My Routines" folder
         */
        folder_id?: number | null;
        /**
         * Additional notes for the routine.
         */
        notes?: string;
        exercises?: Array<PostRoutinesRequestExercise>;
    };
};

export type PutRoutinesRequestSet = {
    /**
     * The type of the set.
     */
    type?: 'warmup' | 'normal' | 'failure' | 'dropset';
    /**
     * The weight in kilograms.
     */
    weight_kg?: number | null;
    /**
     * The number of repetitions.
     */
    reps?: number | null;
    /**
     * The distance in meters.
     */
    distance_meters?: number | null;
    /**
     * The duration in seconds.
     */
    duration_seconds?: number | null;
    /**
     * A custom metric for the set. Currently used for steps and floors.
     */
    custom_metric?: number | null;
    /**
     * Range of reps for the set, if applicable
     */
    rep_range?: {
        /**
         * Starting rep count for the range
         */
        start?: number | null;
        /**
         * Ending rep count for the range
         */
        end?: number | null;
    } | null;
};

export type PutRoutinesRequestExercise = {
    /**
     * The ID of the exercise template.
     */
    exercise_template_id?: string;
    /**
     * The ID of the superset.
     */
    superset_id?: number | null;
    /**
     * The rest time in seconds.
     */
    rest_seconds?: number | null;
    /**
     * Additional notes for the exercise.
     */
    notes?: string | null;
    sets?: Array<PutRoutinesRequestSet>;
};

export type PutRoutinesRequestBody = {
    routine?: {
        /**
         * The title of the routine.
         */
        title?: string;
        /**
         * Additional notes for the routine.
         */
        notes?: string | null;
        exercises?: Array<PutRoutinesRequestExercise>;
    };
};

export type PostRoutineFolderRequestBody = {
    routine_folder?: {
        /**
         * The title of the routine folder.
         */
        title?: string;
    };
};

export type WebhookRequestBody = {
    /**
     * The auth token that will be send as Authorization header in the webhook.
     */
    authToken?: string;
    /**
     * The webhook URL.
     */
    url?: string;
};

export type ExerciseTemplate = {
    /**
     * The exercise template ID.
     */
    id?: string;
    /**
     * The exercise title.
     */
    title?: string;
    /**
     * The exercise type.
     */
    type?: string;
    /**
     * The primary muscle group of the exercise.
     */
    primary_muscle_group?: string;
    /**
     * The secondary muscle groups of the exercise.
     */
    secondary_muscle_groups?: Array<string>;
    /**
     * A boolean indicating whether the exercise is a custom exercise.
     */
    is_custom?: boolean;
};

export type RoutineFolder = {
    /**
     * The routine folder ID.
     */
    id?: number;
    /**
     * The routine folder index. Describes the order of the folder in the list.
     */
    index?: number;
    /**
     * The routine folder title.
     */
    title?: string;
    /**
     * ISO 8601 timestamp of when the folder was last updated.
     */
    updated_at?: string;
    /**
     * ISO 8601 timestamp of when the folder was created.
     */
    created_at?: string;
};

export type Routine = {
    /**
     * The routine ID.
     */
    id?: string;
    /**
     * The routine title.
     */
    title?: string;
    /**
     * The routine folder ID.
     */
    folder_id?: number | null;
    /**
     * ISO 8601 timestamp of when the routine was last updated.
     */
    updated_at?: string;
    /**
     * ISO 8601 timestamp of when the routine was created.
     */
    created_at?: string;
    exercises?: Array<{
        /**
         * Index indicating the order of the exercise in the routine.
         */
        index?: number;
        /**
         * Title of the exercise
         */
        title?: string;
        /**
         * The rest time in seconds between sets of the exercise
         */
        rest_seconds?: string;
        /**
         * Routine notes on the exercise
         */
        notes?: string;
        /**
         * The id of the exercise template. This can be used to fetch the exercise template.
         */
        exercise_template_id?: string;
        /**
         * The id of the superset that the exercise belongs to. A value of null indicates the exercise is not part of a superset.
         */
        supersets_id?: number | null;
        sets?: Array<{
            /**
             * Index indicating the order of the set in the routine.
             */
            index?: number;
            /**
             * The type of set. This can be one of 'normal', 'warmup', 'dropset', 'failure'
             */
            type?: string;
            /**
             * Weight lifted in kilograms.
             */
            weight_kg?: number | null;
            /**
             * Number of reps logged for the set
             */
            reps?: number | null;
            /**
             * Range of reps for the set, if applicable
             */
            rep_range?: {
                /**
                 * Starting rep count for the range
                 */
                start?: number | null;
                /**
                 * Ending rep count for the range
                 */
                end?: number | null;
            } | null;
            /**
             * Number of meters logged for the set
             */
            distance_meters?: number | null;
            /**
             * Number of seconds logged for the set
             */
            duration_seconds?: number | null;
            /**
             * RPE (Relative perceived exertion) value logged for the set
             */
            rpe?: number | null;
            /**
             * Custom metric logged for the set (Currently only used to log floors or steps for stair machine exercises)
             */
            custom_metric?: number | null;
        }>;
    }>;
};

export type Workout = {
    /**
     * The workout ID.
     */
    id?: string;
    /**
     * The workout title.
     */
    title?: string;
    /**
     * The workout description.
     */
    description?: string;
    /**
     * ISO 8601 timestamp of when the workout was recorded to have started.
     */
    start_time?: number;
    /**
     * ISO 8601 timestamp of when the workout was recorded to have ended.
     */
    end_time?: number;
    /**
     * ISO 8601 timestamp of when the workout was last updated.
     */
    updated_at?: string;
    /**
     * ISO 8601 timestamp of when the workout was created.
     */
    created_at?: string;
    exercises?: Array<{
        /**
         * Index indicating the order of the exercise in the workout.
         */
        index?: number;
        /**
         * Title of the exercise
         */
        title?: string;
        /**
         * Notes on the exercise
         */
        notes?: string;
        /**
         * The id of the exercise template. This can be used to fetch the exercise template.
         */
        exercise_template_id?: string;
        /**
         * The id of the superset that the exercise belongs to. A value of null indicates the exercise is not part of a superset.
         */
        supersets_id?: number | null;
        sets?: Array<{
            /**
             * Index indicating the order of the set in the workout.
             */
            index?: number;
            /**
             * The type of set. This can be one of 'normal', 'warmup', 'dropset', 'failure'
             */
            type?: string;
            /**
             * Weight lifted in kilograms.
             */
            weight_kg?: number | null;
            /**
             * Number of reps logged for the set
             */
            reps?: number | null;
            /**
             * Number of meters logged for the set
             */
            distance_meters?: number | null;
            /**
             * Number of seconds logged for the set
             */
            duration_seconds?: number | null;
            /**
             * RPE (Relative perceived exertion) value logged for the set
             */
            rpe?: number | null;
            /**
             * Custom metric logged for the set (Currently only used to log floors or steps for stair machine exercises)
             */
            custom_metric?: number | null;
        }>;
    }>;
};

export type UpdatedWorkout = {
    /**
     * Indicates the type of the event (updated)
     */
    type: string;
    workout: Workout;
};

export type DeletedWorkout = {
    /**
     * Indicates the type of the event (deleted)
     */
    type: string;
    /**
     * The unique identifier of the deleted workout
     */
    id: string;
    /**
     * A date string indicating when the workout was deleted
     */
    deleted_at?: string;
};

export type PaginatedWorkoutEvents = {
    /**
     * The current page number
     */
    page: number;
    /**
     * The total number of pages available
     */
    page_count: number;
    /**
     * An array of workout events (either updated or deleted)
     */
    events: Array<UpdatedWorkout | DeletedWorkout>;
};

export type GetV1WorkoutsData = {
    body?: never;
    headers: {
        'api-key': string;
    };
    path?: never;
    query?: {
        /**
         * Page number (Must be 1 or greater)
         */
        page?: number;
        /**
         * Number of items on the requested page (Max 10)
         */
        pageSize?: number;
    };
    url: '/v1/workouts';
};

export type GetV1WorkoutsErrors = {
    /**
     * Invalid page size
     */
    400: unknown;
};

export type GetV1WorkoutsResponses = {
    /**
     * A paginated list of workouts
     */
    200: {
        /**
         * Current page number
         */
        page?: number;
        /**
         * Total number of pages
         */
        page_count?: number;
        workouts?: Array<Workout>;
    };
};

export type GetV1WorkoutsResponse = GetV1WorkoutsResponses[keyof GetV1WorkoutsResponses];

export type PostV1WorkoutsData = {
    body: PostWorkoutsRequestBody;
    headers: {
        'api-key': string;
    };
    path?: never;
    query?: never;
    url: '/v1/workouts';
};

export type PostV1WorkoutsErrors = {
    /**
     * Invalid request body
     */
    400: {
        /**
         * Error message
         */
        error?: string;
    };
};

export type PostV1WorkoutsError = PostV1WorkoutsErrors[keyof PostV1WorkoutsErrors];

export type PostV1WorkoutsResponses = {
    /**
     * The workout was successfully created
     */
    201: Workout;
};

export type PostV1WorkoutsResponse = PostV1WorkoutsResponses[keyof PostV1WorkoutsResponses];

export type GetV1WorkoutsCountData = {
    body?: never;
    headers: {
        'api-key': string;
    };
    path?: never;
    query?: never;
    url: '/v1/workouts/count';
};

export type GetV1WorkoutsCountResponses = {
    /**
     * The total count of workouts
     */
    200: {
        /**
         * The total number of workouts
         */
        workout_count?: number;
    };
};

export type GetV1WorkoutsCountResponse = GetV1WorkoutsCountResponses[keyof GetV1WorkoutsCountResponses];

export type GetV1WorkoutsEventsData = {
    body?: never;
    headers: {
        'api-key': string;
    };
    path?: never;
    query?: {
        /**
         * Page number (Must be 1 or greater)
         */
        page?: number;
        /**
         * Number of items on the requested page (Max 10)
         */
        pageSize?: number;
        since?: string;
    };
    url: '/v1/workouts/events';
};

export type GetV1WorkoutsEventsErrors = {
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type GetV1WorkoutsEventsResponses = {
    /**
     * A paginated list of workout events
     */
    200: PaginatedWorkoutEvents;
};

export type GetV1WorkoutsEventsResponse = GetV1WorkoutsEventsResponses[keyof GetV1WorkoutsEventsResponses];

export type GetV1WorkoutsByWorkoutIdData = {
    body?: never;
    headers: {
        'api-key': string;
    };
    path: {
        /**
         * The id of the workout
         */
        workoutId: unknown;
    };
    query?: never;
    url: '/v1/workouts/{workoutId}';
};

export type GetV1WorkoutsByWorkoutIdErrors = {
    /**
     * Workout not found
     */
    404: unknown;
};

export type GetV1WorkoutsByWorkoutIdResponses = {
    /**
     * Success
     */
    200: Workout;
};

export type GetV1WorkoutsByWorkoutIdResponse = GetV1WorkoutsByWorkoutIdResponses[keyof GetV1WorkoutsByWorkoutIdResponses];

export type PutV1WorkoutsByWorkoutIdData = {
    body: PostWorkoutsRequestBody;
    headers: {
        'api-key': string;
    };
    path: {
        /**
         * The id of the workout
         */
        workoutId: unknown;
    };
    query?: never;
    url: '/v1/workouts/{workoutId}';
};

export type PutV1WorkoutsByWorkoutIdErrors = {
    /**
     * Invalid request body
     */
    400: {
        /**
         * Error message
         */
        error?: string;
    };
};

export type PutV1WorkoutsByWorkoutIdError = PutV1WorkoutsByWorkoutIdErrors[keyof PutV1WorkoutsByWorkoutIdErrors];

export type PutV1WorkoutsByWorkoutIdResponses = {
    /**
     * The workout was successfully updated
     */
    200: Workout;
};

export type PutV1WorkoutsByWorkoutIdResponse = PutV1WorkoutsByWorkoutIdResponses[keyof PutV1WorkoutsByWorkoutIdResponses];

export type GetV1RoutinesData = {
    body?: never;
    headers: {
        'api-key': string;
    };
    path?: never;
    query?: {
        /**
         * Page number (Must be 1 or greater)
         */
        page?: number;
        /**
         * Number of items on the requested page (Max 10)
         */
        pageSize?: number;
    };
    url: '/v1/routines';
};

export type GetV1RoutinesErrors = {
    /**
     * Invalid page size
     */
    400: unknown;
};

export type GetV1RoutinesResponses = {
    /**
     * A paginated list of routines
     */
    200: {
        /**
         * Current page number
         */
        page?: number;
        /**
         * Total number of pages
         */
        page_count?: number;
        routines?: Array<Routine>;
    };
};

export type GetV1RoutinesResponse = GetV1RoutinesResponses[keyof GetV1RoutinesResponses];

export type PostV1RoutinesData = {
    body: PostRoutinesRequestBody;
    headers: {
        'api-key': string;
    };
    path?: never;
    query?: never;
    url: '/v1/routines';
};

export type PostV1RoutinesErrors = {
    /**
     * Invalid request body
     */
    400: {
        /**
         * Error message
         */
        error?: string;
    };
    /**
     * Routine limit exceeded
     */
    403: {
        /**
         * Error message
         */
        error?: string;
    };
};

export type PostV1RoutinesError = PostV1RoutinesErrors[keyof PostV1RoutinesErrors];

export type PostV1RoutinesResponses = {
    /**
     * The routine was successfully created
     */
    201: Routine;
};

export type PostV1RoutinesResponse = PostV1RoutinesResponses[keyof PostV1RoutinesResponses];

export type GetV1RoutinesByRoutineIdData = {
    body?: never;
    headers: {
        'api-key': string;
    };
    path: {
        /**
         * The id of the routine
         */
        routineId: unknown;
    };
    query?: never;
    url: '/v1/routines/{routineId}';
};

export type GetV1RoutinesByRoutineIdErrors = {
    /**
     * Invalid request body
     */
    400: {
        /**
         * Error message
         */
        error?: string;
    };
};

export type GetV1RoutinesByRoutineIdError = GetV1RoutinesByRoutineIdErrors[keyof GetV1RoutinesByRoutineIdErrors];

export type GetV1RoutinesByRoutineIdResponses = {
    /**
     * The routine with the provided id
     */
    200: {
        routine?: Routine;
    };
};

export type GetV1RoutinesByRoutineIdResponse = GetV1RoutinesByRoutineIdResponses[keyof GetV1RoutinesByRoutineIdResponses];

export type PutV1RoutinesByRoutineIdData = {
    body: PutRoutinesRequestBody;
    headers: {
        'api-key': string;
    };
    path: {
        /**
         * The id of the routine
         */
        routineId: unknown;
    };
    query?: never;
    url: '/v1/routines/{routineId}';
};

export type PutV1RoutinesByRoutineIdErrors = {
    /**
     * Invalid request body
     */
    400: {
        /**
         * Error message
         */
        error?: string;
    };
    /**
     * Routine doesn't exist or doesn't belong to the user
     */
    404: {
        /**
         * Error message
         */
        error?: string;
    };
};

export type PutV1RoutinesByRoutineIdError = PutV1RoutinesByRoutineIdErrors[keyof PutV1RoutinesByRoutineIdErrors];

export type PutV1RoutinesByRoutineIdResponses = {
    /**
     * The routine was successfully updated
     */
    200: Routine;
};

export type PutV1RoutinesByRoutineIdResponse = PutV1RoutinesByRoutineIdResponses[keyof PutV1RoutinesByRoutineIdResponses];

export type GetV1ExerciseTemplatesData = {
    body?: never;
    headers: {
        'api-key': string;
    };
    path?: never;
    query?: {
        /**
         * Page number (Must be 1 or greater)
         */
        page?: number;
        /**
         * Number of items on the requested page (Max 100)
         */
        pageSize?: number;
    };
    url: '/v1/exercise_templates';
};

export type GetV1ExerciseTemplatesErrors = {
    /**
     * Invalid page size
     */
    400: unknown;
};

export type GetV1ExerciseTemplatesResponses = {
    /**
     * A paginated list of exercise templates
     */
    200: {
        /**
         * Current page number
         */
        page?: number;
        /**
         * Total number of pages
         */
        page_count?: number;
        exercise_templates?: Array<ExerciseTemplate>;
    };
};

export type GetV1ExerciseTemplatesResponse = GetV1ExerciseTemplatesResponses[keyof GetV1ExerciseTemplatesResponses];

export type GetV1ExerciseTemplatesByExerciseTemplateIdData = {
    body?: never;
    headers: {
        'api-key': string;
    };
    path: {
        /**
         * The id of the exercise template
         */
        exerciseTemplateId: unknown;
    };
    query?: never;
    url: '/v1/exercise_templates/{exerciseTemplateId}';
};

export type GetV1ExerciseTemplatesByExerciseTemplateIdErrors = {
    /**
     * Exercise template not found
     */
    404: unknown;
};

export type GetV1ExerciseTemplatesByExerciseTemplateIdResponses = {
    /**
     * Success
     */
    200: ExerciseTemplate;
};

export type GetV1ExerciseTemplatesByExerciseTemplateIdResponse = GetV1ExerciseTemplatesByExerciseTemplateIdResponses[keyof GetV1ExerciseTemplatesByExerciseTemplateIdResponses];

export type GetV1RoutineFoldersData = {
    body?: never;
    headers: {
        'api-key': string;
    };
    path?: never;
    query?: {
        /**
         * Page number (Must be 1 or greater)
         */
        page?: number;
        /**
         * Number of items on the requested page (Max 10)
         */
        pageSize?: number;
    };
    url: '/v1/routine_folders';
};

export type GetV1RoutineFoldersErrors = {
    /**
     * Invalid page size
     */
    400: unknown;
};

export type GetV1RoutineFoldersResponses = {
    /**
     * A paginated list of routine folders
     */
    200: {
        /**
         * Current page number
         */
        page?: number;
        /**
         * Total number of pages
         */
        page_count?: number;
        routine_folders?: Array<RoutineFolder>;
    };
};

export type GetV1RoutineFoldersResponse = GetV1RoutineFoldersResponses[keyof GetV1RoutineFoldersResponses];

export type PostV1RoutineFoldersData = {
    body: PostRoutineFolderRequestBody;
    headers: {
        'api-key': string;
    };
    path?: never;
    query?: never;
    url: '/v1/routine_folders';
};

export type PostV1RoutineFoldersErrors = {
    /**
     * Invalid request body
     */
    400: {
        /**
         * Error message
         */
        error?: string;
    };
};

export type PostV1RoutineFoldersError = PostV1RoutineFoldersErrors[keyof PostV1RoutineFoldersErrors];

export type PostV1RoutineFoldersResponses = {
    /**
     * The routine folder was successfully created
     */
    201: RoutineFolder;
};

export type PostV1RoutineFoldersResponse = PostV1RoutineFoldersResponses[keyof PostV1RoutineFoldersResponses];

export type GetV1RoutineFoldersByFolderIdData = {
    body?: never;
    headers: {
        'api-key': string;
    };
    path: {
        /**
         * The id of the routine folder
         */
        folderId: unknown;
    };
    query?: never;
    url: '/v1/routine_folders/{folderId}';
};

export type GetV1RoutineFoldersByFolderIdErrors = {
    /**
     * Routine folder not found
     */
    404: unknown;
};

export type GetV1RoutineFoldersByFolderIdResponses = {
    /**
     * Success
     */
    200: RoutineFolder;
};

export type GetV1RoutineFoldersByFolderIdResponse = GetV1RoutineFoldersByFolderIdResponses[keyof GetV1RoutineFoldersByFolderIdResponses];

export type DeleteV1WebhookSubscriptionData = {
    body?: never;
    headers: {
        /**
         * Your API key
         */
        'api-key': string;
    };
    path?: never;
    query?: never;
    url: '/v1/webhook-subscription';
};

export type DeleteV1WebhookSubscriptionResponses = {
    /**
     * The webhook subscription was successfully deleted
     */
    200: unknown;
};

export type GetV1WebhookSubscriptionData = {
    body?: never;
    headers: {
        /**
         * Your API key
         */
        'api-key': string;
    };
    path?: never;
    query?: never;
    url: '/v1/webhook-subscription';
};

export type GetV1WebhookSubscriptionErrors = {
    /**
     * No webhook subscription found
     */
    404: unknown;
};

export type GetV1WebhookSubscriptionResponses = {
    /**
     * The current webhook subscription
     */
    200: {
        /**
         * The webhook URL
         */
        url?: string;
        /**
         * The auth token for the webhook
         */
        auth_token?: string;
    };
};

export type GetV1WebhookSubscriptionResponse = GetV1WebhookSubscriptionResponses[keyof GetV1WebhookSubscriptionResponses];

export type PostV1WebhookSubscriptionData = {
    body: WebhookRequestBody;
    headers: {
        'api-key': string;
    };
    path?: never;
    query?: never;
    url: '/v1/webhook-subscription';
};

export type PostV1WebhookSubscriptionErrors = {
    /**
     * Invalid request body
     */
    400: {
        /**
         * Error message
         */
        error?: string;
    };
};

export type PostV1WebhookSubscriptionError = PostV1WebhookSubscriptionErrors[keyof PostV1WebhookSubscriptionErrors];

export type PostV1WebhookSubscriptionResponses = {
    /**
     * The webhook subscription was successfully created
     */
    201: unknown;
};

export type ClientOptions = {
    baseUrl: `${string}://docs` | (string & {});
};